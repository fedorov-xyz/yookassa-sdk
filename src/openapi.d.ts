/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/payments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Создание платежа
     * @description Чтобы принять оплату, необходимо создать объект платежа — Payment. Он содержит всю необходимую информацию для проведения оплаты (сумму, валюту и статус). У платежа линейный жизненный цикл, он последовательно переходит из статуса в статус.
     */
    post: {
      parameters: {
        query?: never;
        header: {
          'Idempotence-Key': components['parameters']['IdempotenceKey'];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CreatePaymentRequest'];
        };
      };
      responses: {
        /** @description Payment successfully created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Payment'];
          };
        };
        /** @description Invalid request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Payment not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/payments/{paymentId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Информация о платеже
     * @description Запрос позволяет получить информацию о текущем состоянии платежа по его уникальному идентификатору
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID платежа */
          paymentId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Payment retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Payment'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Payment not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/payments/{payment_id}/cancel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Отмена платежа
     * @description Отменяет платеж, находящийся в статусе `waiting_for_capture`.
     *
     *     Отмена платежа значит, что вы не готовы выдать пользователю товар или оказать услугу. Как только вы отменяете платеж, мы начинаем возвращать деньги на счет плательщика. Для платежей банковскими картами, из кошелька ЮMoney или через SberPay отмена происходит мгновенно. Для остальных способов оплаты возврат может занимать до нескольких дней
     *
     *     Подробнее: https://yookassa.ru/developers/payment-acceptance/getting-started/payment-process#capture-and-cancel
     *
     */
    post: {
      parameters: {
        query?: never;
        header: {
          'Idempotence-Key': components['parameters']['IdempotenceKey'];
        };
        path: {
          /** @description ID платежа */
          payment_id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Payment successfully canceled */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Payment'];
          };
        };
        400: components['responses']['ErrorResponse'];
        401: components['responses']['ErrorResponse'];
        403: components['responses']['ErrorResponse'];
        404: components['responses']['ErrorResponse'];
        429: components['responses']['ErrorResponse'];
        500: components['responses']['ErrorResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/invoices': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Создание счета */
    post: operations['create-invoice'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description Error response for invalid or failed requests. */
    ErrorResponse: {
      /** @enum {string} */
      type: 'error';
      /**
       * @description Идентификатор ошибки. Используйте его, если вам необходимо обратиться в техническую поддержку
       * @example 249e2cf0-000f-5000-a000-1df11df15d3c
       */
      id: string;
      /**
       * @description Код ошибки
       *     - `invalid_request` — неправильный запрос, например ошибка в значении параметра или нарушение логики проведения операции (HTTP 400) - `invalid_credentials` — некорректные данные для аутентификации запросов (HTTP 401) - `forbidden` — не хватает прав для выполнения операции (HTTP 403) - `not_found` — запрашиваемый ресурс не найден (HTTP 404) - `too_many_requests` — превышен лимит запросов в единицу времени (HTTP 429) - `internal_server_error` — технические неполадки на стороне ЮKassa (HTTP 500)
       *
       * @enum {string}
       */
      code:
        | 'invalid_request'
        | 'invalid_credentials'
        | 'forbidden'
        | 'not_found'
        | 'too_many_requests'
        | 'internal_server_error';
      /** @description Описание ошибки на английском языке */
      description?: string;
      /** @description Название заголовка или параметра тела ответа, из-за которого произошла ошибка */
      parameter?: string;
    };
    /** @description Запрос на создание платежа
     *
     *     **FIXME**: Описать `airline`, `transfer`, `deal`, `receiver`
     *      */
    CreatePaymentRequest: {
      amount: components['schemas']['Amount'];
      /**
       * @description Описание транзакции (не более 128 символов), которое вы увидите в личном кабинете ЮKassa, а пользователь — при оплате
       *
       * @example Оплата заказа № 72 для user@yoomoney.ru
       */
      description?: string;
      receipt?: components['schemas']['Receipt'];
      recipient?: components['schemas']['Recipient'];
      /** @description Одноразовый токен для проведения оплаты, сформированный с помощью Checkout.js или мобильного SDK */
      payment_token?: string;
      /** @description Идентификатор сохраненного способа оплаты */
      payment_method_id?: string;
      /** @description FIXME */
      payment_method_data?: Record<string, never>;
      /** @description FIXME */
      confirmation?: Record<string, never>;
      /** @description Сохранение платежных данных для проведения автоплатежей. Возможные значения:
       *
       *     - `true` — сохранить способ оплаты (сохранить платежные данные);
       *     - `false` — провести платеж без сохранения способа оплаты.
       *
       *     Доступно только после согласования с менеджером ЮKassa.
       *      */
      save_payment_method?: boolean;
      /**
       * @description Автоматический прием  поступившего платежа. Возможные значения:
       *
       *     - `true` — оплата списывается сразу (платеж в одну стадию);
       *     - `false` — оплата холдируется и списывается по вашему запросу (платеж в две стадии).
       *
       * @default false
       */
      capture: boolean;
      /** @description IPv4 или IPv6-адрес пользователя. Если не указан, используется IP-адрес TCP-подключения */
      client_ip?: string;
      /** @description Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа).
       *     Передаются в виде набора пар «ключ-значение» и возвращаются в ответе от ЮKassa.
       *     Ограничения: максимум 16 ключей, имя ключа не больше 32 символов, значение ключа не больше 512 символов, тип данных — строка в формате UTF-8.
       *      */
      metadata?: {
        [key: string]: string;
      };
      /** @description Идентификатор покупателя в вашей системе, например электронная почта или номер телефона. Не более 200 символов. Присутствует, если вы хотите запомнить банковскую карту и отобразить ее при повторном платеже в виджете ЮKassa. */
      merchant_customer_id?: string;
    };
    /** @description Запрос на создание инвойса. */
    CreateInvoiceRequest: {
      payment_data: components['schemas']['CreateInvoicePaymentData'];
      /** @description Корзина заказа — список товаров или услуг, который отобразится на странице счета перед оплатой */
      cart: components['schemas']['InvoiceCartItem'][];
      /**
       * Format: date-time
       * @description Срок действия счета — дата и время, до которых можно оплатить выставленный счет. Указывается по UTC и передается в формате ISO 8601
       * @example 2024-10-18T10:51:18.139Z
       */
      expires_at: string;
      /**
       * @description Язык интерфейса, писем и смс, которые будет видеть или получать пользователь. Формат соответствует ISO/IEC 15897
       *
       * @enum {string}
       */
      locale?: 'ru_RU' | 'en_US';
      /**
       * @description Описание выставленного счета (не более 128 символов), которое вы увидите в личном кабинете ЮKassa, а пользователь на странице счета
       * @example Счет на оплату по договору 37
       */
      description?: string;
      metadata?: components['schemas']['Metadata'];
    };
    /** @description Данные для проведения платежа по выставленному счету
     *      */
    CreateInvoicePaymentData: {
      amount: components['schemas']['Amount'];
      receipt?: components['schemas']['Receipt'];
      recipient?: components['schemas']['Recipient'];
      /** @description Сохранение платежных данных для проведения автоплатежей. Возможные значения:
       *
       *     - `true` — сохранить способ оплаты (сохранить платежные данные);
       *     - `false` — провести платеж без сохранения способа оплаты.
       *
       *     Доступно только после согласования с менеджером ЮKassa.
       *      */
      save_payment_method?: boolean;
      /** @description Автоматический прием  поступившего платежа. Возможные значения:
       *
       *     - `true` — оплата списывается сразу (платеж в одну стадию);
       *     - `false` — оплата холдируется и списывается по вашему запросу (платеж в две стадии).
       *      */
      capture?: boolean;
      /** @description IPv4 или IPv6-адрес пользователя. Если не указан, используется IP-адрес TCP-подключения */
      client_ip?: string;
      /**
       * @description Описание транзакции (не более 128 символов), которое вы увидите в личном кабинете ЮKassa, а пользователь — при оплате
       *
       * @example Оплата заказа № 72 для user@yoomoney.ru
       */
      description?: string;
      metadata?: components['schemas']['Metadata'];
    };
    /** @description Любые дополнительные данные, которые нужны вам для работы (например, ваш внутренний идентификатор заказа).
     *     Передаются в виде набора пар «ключ-значение» и возвращаются в ответе от ЮKassa.
     *     Ограничения: максимум 16 ключей, имя ключа не больше 32 символов, значение ключа не больше 512 символов, тип данных — строка в формате UTF-8.
     *      */
    Metadata: {
      [key: string]: string;
    };
    /** @description Данные для формирования чека
     *
     *     **FIXME: Нужно описать недостающие необязательные поля**
     *      */
    Receipt: {
      customer?: components['schemas']['Customer'];
      /** @description Список товаров или услуг, включенных в чек. */
      items: components['schemas']['ReceiptItem'][];
    };
    /** @description Информация о пользователе. Необходимо указать как минимум контактные данные: для Чеков от ЮKassa — электронную почту (`customer.email`), в остальных случаях — электронную почту (`customer.email`) или номер телефона (`customer.phone`).
     *      */
    Customer: {
      /** @description Для юрлица — название организации, для ИП и физического лица — ФИО. Если у физлица отсутствует ИНН, в этом же параметре передаются паспортные данные. Не более 256 символов.
       *
       *     Можно передавать, если используете Чеки от ЮKassa или онлайн-кассу Orange Data, Атол Онлайн.
       *      */
      full_name?: string;
      /** @description ИНН пользователя (10 или 12 цифр). Если у физического лица отсутствует ИНН, необходимо передать паспортные данные в параметре full_name.
       *
       *     Можно передавать, если используете Чеки от ЮKassa или онлайн-кассу Orange Data, Атол Онлайн.
       *      */
      inn?: string;
      /** @description Электронная почта пользователя для отправки чека. Обязательный параметр, если используете Чеки от ЮKassa или если используете другое решение (стороннюю онлайн-кассу, чеки самозанятых) и не передаете phone. */
      email?: string;
      /**
       * @description Телефон пользователя для отправки чека. Указывается в формате ITU-T E.164. Обязательный параметр, если не передан email.
       * @example 79000000000
       */
      phone?: string;
    };
    /** @description Информация о товаре или услуге в чеке
     *
     *     **FIXME: Нужно описать недостающие необязательные поля**
     *      */
    ReceiptItem: {
      /** @description Название товара (от 1 до 128 символов). Тег в 54 ФЗ — 1030 */
      description: string;
      amount: components['schemas']['Amount'];
      /** @description Ставка НДС (тег в 54 ФЗ — 1199).
       *
       *     Для чеков по 54-ФЗ — перечень возможных значений:
       *      - для Чеков от ЮKassa: https://yookassa.ru/developers/payment-acceptance/receipts/54fz/yoomoney/parameters-values#vat-codes
       *      - для сторонних онлайн-касс: https://yookassa.ru/developers/payment-acceptance/receipts/54fz/other-services/parameters-values#vat-codes
       *
       *     Для чеков самозанятых — фиксированное значение: `1`
       *      */
      vat_code: number;
      /**
       * Format: float
       * @description Количество товара (тег в 54 ФЗ — 1023).
       *
       *     - Для чеков по 54-ФЗ: можно передать целое или дробное число. Разделитель дробной части — точка, разделитель тысяч отсутствует. Максимально возможное значение и максимальное количество знаков после точки (для дробных значений) зависят от модели вашей онлайн-кассы. Для чеков от ЮKassa максимально возможное значение — 99999.999, не более 3 знаков после точки.
       *     - Для чеков самозанятых: только целые положительные числа (без точки и дробной части). Пример: 1.
       *
       * @example 1
       */
      quantity: number;
      /**
       * @description Мера количества предмета расчета (тег в 54 ФЗ — 2108) — единица измерения товара, например штуки, граммы.
       *
       *     Обязательный параметр, если используете Чеки от ЮKassa или онлайн-кассу, обновленную до ФФД 1.2.
       *
       *     Перечень возможных значений:
       *     - для Чеков от ЮKassa: https://yookassa.ru/developers/payment-acceptance/receipts/54fz/yoomoney/parameters-values#measure
       *     - для сторонних онлайн-касс: https://yookassa.ru/developers/payment-acceptance/receipts/54fz/other-services/parameters-values#measure
       *
       * @example piece
       */
      measure?: string;
    };
    Payment: {
      /**
       * @description Unique identifier of the payment.
       * @example 249e2cf0-000f-5000-a000-1df11df15d3c
       */
      id?: string;
      /**
       * @description Payment status.
       * @example pending
       */
      status?: string;
      amount?: components['schemas']['Amount'];
      /**
       * Format: date-time
       * @description Date and time when the payment was created.
       * @example 2024-01-01T12:00:00Z
       */
      created_at?: string;
      confirmation?: components['schemas']['Confirmation'];
      /**
       * Format: date-time
       * @description When the payment was captured.
       * @example 2024-01-01T12:30:00Z
       */
      captured_at?: string;
      /**
       * @description Description of the payment.
       * @example Order #12345
       */
      description?: string;
      recipient?: components['schemas']['Recipient'];
    };
    /** @description Объект счета (Invoice) содержит всю информацию о счете, актуальную на текущий момент времени. Он формируется при создании счета и приходит в ответ на любой запрос, связанный с счетами.
     *
     *     Набор возвращаемых параметров зависит от статуса объекта (значение параметра status) и того, какие параметры вы передали в запросе на создание счета.
     *
     *     Объект может содержать параметры и значения, не описанные в этом Справочнике API. Их следует игнорировать.
     *      */
    Invoice: {
      /** @description Идентификатор счета в ЮКасса */
      id: string;
      /**
       * @description Статус счета. Возможные значения:
       *
       *     - `pending` — счет создан и ожидает успешной оплаты;
       *     - `succeeded` — счет успешно оплачен, есть связанный платеж в статусе succeeded (финальный и неизменяемый статус для платежей в одну стадию);
       *     - `canceled` — вы отменили счет, успешный платеж по нему не поступил или был отменен (при оплате в две стадии) либо истек срок действия счета (финальный и неизменяемый статус).
       *
       * @enum {string}
       */
      status: 'pending' | 'succeeded' | 'canceled';
      /** @description Корзина заказа — список товаров или услуг, который отобразится на странице счета перед оплатой */
      cart: components['schemas']['InvoiceCartItem'][];
      delivery_method?: components['schemas']['InvoiceDeliveryMethod'];
      payment_details?: components['schemas']['InvoicePaymentDetails'];
      /**
       * @description Дата и время создания счета на оплату. Указывается по UTC и передается в формате ISO 8601
       * @example 2017-11-03T11:52:31.827Z
       */
      created_at: string;
      /**
       * @description Срок действия счета — дата и время, до которых можно оплатить выставленный счет. Указывается по UTC и передается в формате ISO 8601
       * @example 2017-11-03T11:52:31.827Z
       */
      expires_at?: string;
      /**
       * @description Описание выставленного счета (не более 128 символов), которое вы увидите в личном кабинете ЮKassa, а пользователь на странице счета
       * @example Счет на оплату по договору 37
       */
      description?: string;
      metadata?: components['schemas']['Metadata'];
    };
    InvoiceCartItem: {
      /** @description Название товара или услуги (от 1 до 128 символов). Пользователь увидит его на странице счета перед оплатой */
      description: string;
      /** @description Полная цена товара или услуги. Пользователь увидит ее на странице счета перед оплатой */
      price: components['schemas']['Amount'];
      /** @description Итоговая цена товара с учетом скидки. Если передана, то на странице счета цена отобразится с учетом скидки. Не нужно передавать, если пользователь оплачивает полную стоимость товара или услуги */
      discount_price?: components['schemas']['Amount'];
      /**
       * @description Количество товара. Можно передать целое или дробное число. Разделитель дробной части — точка, разделитель тысяч отсутствует, максимум три знака после точки. Пример: 5.000
       *
       * @example 5
       */
      quantity: number;
    };
    /** @description Данные о выбранном способе доставки счета. Присутствует только для счетов в статусе `pending` */
    InvoiceDeliveryMethod: {
      /** @enum {string} */
      type: 'self';
      /** @description URL страницы счета, который необходимо передать пользователю для оплаты */
      url?: string;
    };
    /** @description Данные о платеже по выставленному счету. Присутствуют, только если платеж успешно подтвержден пользователем */
    InvoicePaymentDetails: {
      /** @description Идентификатор платежа в ЮKassa */
      id: string;
      /**
       * @description Статус платежа. Возможные значения:
       *
       *     - `waiting_for_capture` — для платежей в две стадии: платеж оплачен, деньги авторизованы, вам необходимо списать оплату или отменить платеж;
       *     - `succeeded` — платеж успешно завершен, деньги будут перечислены на ваш расчетный счет в соответствии с вашим договором с ЮKassa (финальный и неизменяемый статус);
       *     - `canceled` — для платежей в две стадии: вы отменили платеж по API (финальный и неизменяемый статус).
       *
       * @enum {string}
       */
      status: 'waiting_for_capture' | 'succeeded' | 'canceled';
    };
    /** @description Сумма платежа. Иногда партнеры ЮKassa берут с пользователя дополнительную комиссию, которая не входит в эту сумму */
    Amount: {
      /**
       * @description Сумма в выбранной валюте. Всегда дробное значение.
       *     Разделитель дробной части — точка, разделитель тысяч отсутствует.
       *     Количество знаков после точки зависит от выбранной валюты
       * @example 1000.00
       */
      value: string;
      /**
       * @description Трехбуквенный код валюты в формате ISO-4217.
       *     Должен соответствовать валюте субаккаунта (`recipient.gateway_id`), если вы разделяете потоки платежей, и валюте аккаунта (shopId в личном кабинете), если не разделяете
       * @example RUB
       */
      currency: string;
    };
    /** @description Выбранный способ подтверждения платежа. Присутствует, когда платеж ожидает подтверждения от пользователя */
    Confirmation:
      | components['schemas']['ConfirmationEmbedded']
      | components['schemas']['ConfirmationExternal']
      | components['schemas']['ConfirmationMobileApplication']
      | components['schemas']['ConfirmationQR']
      | components['schemas']['ConfirmationRedirect'];
    /** @description Действия, необходимые для подтверждения платежа, будут зависеть от способа оплаты, который пользователь выберет в виджете ЮKassa. Подтверждение от пользователя получит ЮKassa — вам необходимо только встроить виджет к себе на страницу */
    ConfirmationEmbedded: {
      /** @enum {string} */
      type: 'embedded';
      /** @description Токен для инициализации платежного виджета ЮKassa */
      confirmation_token: string;
    };
    /** @description Для подтверждения платежа пользователю необходимо совершить действия во внешней системе (например, ответить на смс). От вас требуется только сообщить пользователю о дальнейших шагах */
    ConfirmationExternal: {
      /** @enum {string} */
      type: 'external';
    };
    /** @description Для подтверждения платежа пользователю необходимо совершить действия в мобильном приложении (например, в приложении интернет-банка). Вам нужно перенаправить пользователя на confirmation_url, полученный в платеже */
    ConfirmationMobileApplication: {
      /** @enum {string} */
      type: 'mobile_application';
      /** @description Диплинк на мобильное приложение, в котором пользователь подтверждает платеж */
      confirmation_url: string;
    };
    /** @description Для подтверждения платежа пользователю необходимо просканировать QR-код. От вас требуется сгенерировать QR-код, используя любой доступный инструмент, и отобразить его на странице оплаты */
    ConfirmationQR: {
      /** @enum {string} */
      type: 'qr';
      /** @description Данные для генерации QR-кода */
      confirmation_data: string;
    };
    /** @description Пользователю необходимо что-то сделать на странице ЮKassa или ее партнера (например, ввести данные банковской карты или пройти аутентификацию по 3-D Secure). Вам нужно перенаправить пользователя на confirmation_url, полученный в платеже . При успешной оплате (и если что-то пойдет не так) ЮKassa вернет пользователя на return_url, который вы отправите в запросе на создание платежа */
    ConfirmationRedirect: {
      /** @enum {string} */
      type: 'redirect';
      /** @description URL, на который необходимо перенаправить пользователя для подтверждения оплаты */
      confirmation_url: string;
      /** @description Запрос на проведение платежа с аутентификацией по 3-D Secure.
       *     Будет работать, если оплату банковской картой вы по умолчанию принимаете без подтверждения платежа пользователем.
       *     В остальных случаях аутентификацией по 3-D Secure будет управлять ЮKassa.
       *     Если хотите принимать платежи без дополнительного подтверждения пользователем, напишите вашему менеджеру ЮKassa */
      enforce?: string;
      /** @description URL, на который вернется пользователь после подтверждения или отмены платежа на веб-странице. Не более 2048 символов */
      return_url?: string;
    };
    /** @description Получатель платежа
     *
     *     **Для создания платежей**
     *     Нужен, если вы разделяете потоки платежей в рамках одного аккаунта или создаете платеж в адрес другого аккаунта.
     *      */
    Recipient: {
      /** @description Идентификатор магазина в ЮKassa */
      account_id: string;
      /** @description Идентификатор субаккаунта. Используется для разделения потоков платежей в рамках одного аккаунта */
      gateway_id: string;
    };
    /** @description Входящее уведомление */
    WebhookEvent:
      | components['schemas']['WebhookEventPaymentWaitingForCapture']
      | components['schemas']['WebhookEventPaymentSucceeded']
      | components['schemas']['WebhookEventPaymentCanceled'];
    WebhookEventPaymentWaitingForCapture: {
      /** @enum {string} */
      type: 'notification';
      /** @enum {string} */
      event: 'payment.waiting_for_capture';
      object: components['schemas']['Payment'];
    };
    WebhookEventPaymentSucceeded: {
      /** @enum {string} */
      type: 'notification';
      /** @enum {string} */
      event: 'payment.succeeded';
      object: components['schemas']['Payment'];
    };
    WebhookEventPaymentCanceled: {
      /** @enum {string} */
      type: 'notification';
      /** @enum {string} */
      event: 'payment.canceled';
      object: components['schemas']['Payment'];
    };
  };
  responses: {
    /** @description Тело ответа при ошибке */
    ErrorResponse: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['ErrorResponse'];
      };
    };
  };
  parameters: {
    IdempotenceKey: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  'create-invoice': {
    parameters: {
      query?: never;
      header: {
        'Idempotence-Key': components['parameters']['IdempotenceKey'];
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateInvoiceRequest'];
      };
    };
    responses: {
      /** @description Созданный объект счета в актуальном статусе */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Invoice'];
        };
      };
      400: components['responses']['ErrorResponse'];
      401: components['responses']['ErrorResponse'];
      403: components['responses']['ErrorResponse'];
      404: components['responses']['ErrorResponse'];
      429: components['responses']['ErrorResponse'];
      500: components['responses']['ErrorResponse'];
    };
  };
}
